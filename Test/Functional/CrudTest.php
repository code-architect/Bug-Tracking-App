<?php
namespace Test\Functional;

use App\Database\QueryBuilder;
use App\Entity\BugReport;
use App\Helpers\DbQueryBuilderFactory;
use App\Helpers\HttpClient;
use App\Repository\BugReportRepository;
use PHPUnit\Framework\TestCase;
use function MongoDB\BSON\fromJSON;

class CrudTest extends TestCase
{
    /** @var BugReportRepository @repository */
    private $repository;

    /** @var QueryBuilder $queryBuilder */
    private $queryBuilder;

    /** @var HttpClient $client */
    private $client;

    protected function setUp()
    {
        $this->queryBuilder = DbQueryBuilderFactory::make();
        //$this->queryBuilder->beginTransaction();
        $this->repository = new BugReportRepository($this->queryBuilder);
        $this->client = new HttpClient();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

//    protected function tearDown()
//    {
//        $this->queryBuilder->rollback();
//        parent::tearDown();
//    }


    public function testItCanCreateReportUsingPostRequest()
    {
        $postData = $this->getPostData(['add' => true]);
        $response = $this->client->post("http://localhost/sand_box/bug_tracking_app/Src/View/add.php", $postData);
        $response = json_decode($response, true);
        self::assertEquals(200, $response['statusCode']);

        $result = $this->repository->findBy([
            ['report_type', '=', 'Audio Issue'],
            ['email', '=', 'xyz@abc.com'],
            ['link', '=', 'https://xyz-link.com']
        ]);

        /** @var BugReport $bugReport */
        $bugReport = $result[0] ?? [];

        self::assertInstanceOf(BugReport::class, $bugReport);
        self::assertSame('Audio Issue', $bugReport->getReportType());
        self::assertSame('https://xyz-link.com', $bugReport->getLink());
        self::assertSame('xyz@abc.com', $bugReport->getEmail());

        return $bugReport;
    }


    /** @depends testItCanCreateReportUsingPostRequest
     * @param BugReport $bugReport
     * @return BugReport
     */
    public function testItCanUpdateReportUsingPostRequest(BugReport $bugReport)
    {
        $postData = $this->getPostData([
            'update'        => true,
            'message'       =>  'There is an video issue on edison tutorial, please check and fix it',
            'link'          =>  'https://updated.com',
            'report_id'     =>  $bugReport->getId()
        ]);
        $response = $this->client->post("http://localhost/sand_box/bug_tracking_app/src/View/update.php", $postData);

        $response = json_decode($response, true);
        self::assertEquals(200, $response['statusCode']);

        /** @var BugReport $result */
        $result = $this->repository->find($bugReport->getId());

        self::assertInstanceOf(BugReport::class, $result);
        self::assertSame('https://updated.com', $result->getLink());
        self::assertSame( 'There is an video issue on edison tutorial, please check and fix it', $result->getMessage());

        return $result;
    }


    /**
     * @depends testItCanUpdateReportUsingPostRequest
     * @param BugReport $bugReport
     */
    public function testItCanDeleteReportUsingPostRequest(BugReport $bugReport)
    {
        $postData = [
            'delete'        => true,
            'report_id'     =>  $bugReport->getId()
        ];
        $response = $this->client->post("http://localhost/sand_box/bug_tracking_app/src/View/delete.php", $postData);

        $response = json_decode($response, true);
        self::assertEquals(200, $response['statusCode']);

        /** @var BugReport $result */
        $result = $this->repository->find($bugReport->getId());

        self::assertNull($result);
    }


//---------------------------------------------- Internal Methods --------------------------------------------------//
    private function getPostData(array  $options = []): array
    {
        return array_merge([
            'report_type'   =>  'Audio Issue',
            'message'       =>  'There is an audio issue on 2.0 tutorial, please check and fix it',
            'email'         =>  'xyz@abc.com',
            'link'          =>  'https://xyz-link.com',
        ], $options);
    }
}